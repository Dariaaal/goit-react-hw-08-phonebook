{"version":3,"file":"static/js/287.aa45615f.chunk.js","mappings":"kNAmBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,EClCD,EAAyB,yBAAzB,EAA0D,wB,SCG3C,SAASQ,EAAT,GAA+B,IAAZC,EAAW,EAAXA,SAC9B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAcjB,IACdkB,EAAgBlB,IAEhBmB,EAAS,CAACN,KAAAA,EAAME,OAAAA,GAEhBK,EAAoB,SAAAC,GACtB,MAAwBA,EAAEC,OAAlBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MACd,OAAQV,GACJ,IAAK,OACDC,EAAQS,GACR,MACJ,IAAK,SACDP,EAAUO,GACV,MACJ,QACI,OAEX,EAQKC,EAAQ,WACVV,EAAQ,IACRE,EAAU,GACb,EAEG,OACI,kBAAML,SAZO,SAAAU,GACjBA,EAAEI,iBACFd,EAASQ,GACTK,GACH,EAQO,WACA,kBAAOE,QAAST,EAAaU,UAAWC,EAAxC,mBAGI,kBACEC,KAAK,OACL3B,GAAIe,EACJJ,KAAK,OACLU,MAAOV,EACPiB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUb,KAEhB,kBAAOM,QAASR,EAAeS,UAAWC,EAA1C,qBAGI,kBACEC,KAAK,MACL3B,GAAIgB,EACJL,KAAK,SACLU,MAAOR,EACPe,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAUb,KAEhB,mBAAQS,KAAK,SAASF,UAAWC,EAAjC,2BAGX,CCpED,MAAuB,uBAAvB,EAAuD,yBCavD,EAXiB,SAAC,GAAD,IAAEM,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,gBAAZ,OACjB,wBACKD,EAASE,KAAI,gBAAElC,EAAF,EAAEA,GAAIW,EAAN,EAAMA,KAAME,EAAZ,EAAYA,OAAZ,OACd,gBAAaY,UAAWC,EAAxB,WACI,yBAAIf,EAAJ,KAAYE,MACZ,mBAAQc,KAAK,SAASF,UAAWC,EAAYS,QAAS,kBAAMF,EAAgBjC,EAAtB,EAAtD,sBAFKA,EADK,KAFD,ECFjB,EAAyB,uBCGnBoC,EAAgBtC,IAStB,EAPe,SAAC,GAAD,IAAEuC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,eAAV,OACX,iBAAKb,UAAWC,EAAhB,WACI,kBAAOF,QAASY,EAAhB,oCACA,kBAAOT,KAAK,OAAO3B,GAAIoC,EAAef,MAAOgB,EAAQN,SAAUO,MAHxD,E,0BCNFC,EAAc,SAAAC,GAAK,OAAIA,EAAMR,SAASS,KAAnB,ECUjB,SAASC,IAEpB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXZ,GAAWa,EAAAA,EAAAA,IAAYC,GAEvBT,GAASQ,EAAAA,EAAAA,KAAY,SAAAL,GAAK,OAAIA,EAAMH,MAAV,KAEhCU,EAAAA,EAAAA,YAAU,WACRJ,EAASK,EAAAA,KACV,GAAC,CAACL,IAEL,IAyBOM,EAAkBjB,EAASK,QAAO,SAAAa,GAAO,OAC9CA,EAAQvC,KAAKwC,cAAcC,SAASf,EAAOc,cADG,IAG9C,OACI,iBACEE,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,SAAU,GACVC,MAAO,WAPX,WAWA,SAACnD,EAAD,CAAUC,SAxCU,SAAAmD,GAExB,IAAMV,GAAO,QACXlD,GAAIF,KACD8D,GAKL,GAFyB5B,EAAS6B,MAAK,SAAAC,GAAI,OAAIA,EAAKnD,OAASuC,EAAQvC,IAA1B,IAGzC,OAAOoD,MAAK,UAAKH,EAAKjD,KAAV,4BAGdgC,EAASK,EAAAA,GAA8BE,GACxC,KA2BK,sCACA,SAAC,EAAD,CAAQb,OAAQA,EAAQC,eAtBT,SAAAnB,GACnB,IAAM6C,EAAc7C,EAAEC,OAAOC,MAC5BsB,GAASsB,EAAAA,EAAAA,IAAUD,GACpB,KAoBI,SAAC,EAAD,CAAUhC,SAAUiB,EAAiBhB,gBA3BnB,SAAAjC,GACtB2C,EAASK,EAAAA,GAAiChD,GAC5C,MA4BD,C","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/phonebook/CardForm.module.css?edbb","components/phonebook/CardForm.jsx","webpack://react-homework-template/./src/components/phonebook/CardList.module.css?7a99","components/phonebook/CardList.jsx","webpack://react-homework-template/./src/components/phonebook/Filter.module.css?0cd6","components/phonebook/Filter.jsx","redux/contacts/contactsSelectors.js","pages/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"CardForm_button__hfQy2\",\"label\":\"CardForm_label__03vuY\"};","import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport css from \"./CardForm.module.css\";\n\nexport default function CardForm({onSubmit}) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n\n    const fields = {name, number};\n\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }     \n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit(fields);\n        reset();\n    }\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    }\n\n        return (\n            <form onSubmit={handleSubmit}>\n            <label htmlFor={nameInputId} className={css.label}>\n              Name\n              </label>\n                <input\n                  type=\"text\"\n                  id={nameInputId}\n                  name=\"name\"\n                  value={name}\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                  onChange={handleInputChange}\n                />\n            <label htmlFor={numberInputId} className={css.label}>\n              Number\n            </label>\n                <input \n                  type=\"tel\"\n                  id={numberInputId} \n                  name=\"number\"\n                  value={number}\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                  required \n                  onChange={handleInputChange}\n                />\n            <button type=\"submit\" className={css.button}>Add contact</button>\n          </form>\n        );\n}","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"CardList_user__zAbyi\",\"delete\":\"CardList_delete__LFslH\"};","import React from \"react\";\nimport css from './CardList.module.css'\n\nconst CardList = ({contacts, onDeleteContact}) => (\n<ul>\n    {contacts.map(({id, name, number}) => (\n    <li key={id} className={css.user}>\n        <p>{name}: {number}</p>\n        <button type=\"button\" className={css.delete} onClick={() => onDeleteContact(id)}>Delete</button>\n    </li>\n    ))}\n    </ul>\n);\n\nexport default CardList;","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__FHK1H\"};","import React from \"react\";\nimport css from \"./Filter.module.css\";\nimport { nanoid } from \"nanoid\";\n\nconst filterInputId = nanoid();\n\nconst Filter = ({filter, onChangeFilter}) => (\n    <div className={css.filter}>\n        <label htmlFor={filterInputId}>Find contacts by name</label>\n        <input type=\"text\" id={filterInputId} value={filter} onChange={onChangeFilter}/>\n    </div>\n)\n\nexport default Filter;","export const getContacts = state => state.contacts.items;","import React, { useEffect } from \"react\";\nimport CardForm from \"../components/phonebook/CardForm\";\nimport CardList from \"../components/phonebook/CardList\";\nimport Filter from \"../components/phonebook/Filter\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter } from \"../redux/contacts/filterReducer\";\nimport * as contactsOperations from \"../redux/contacts/contactsOperations\";\nimport * as contactsSelectors from \"../redux/contacts/contactsSelectors\";\n\nexport default function Contacts() {\n    \n    const dispatch = useDispatch();\n\n    const contacts = useSelector(contactsSelectors.getContacts);\n\n    const filter = useSelector(state => state.filter);\n\n    useEffect(() => {\n      dispatch(contactsOperations.fetchContacts());\n    },[dispatch])\n\n  const formSubmitHandler = data => {\n\n    const contact = {\n      id: nanoid(),\n      ...data\n    }\n\n    const dublicateContact = contacts.find(item => item.name === contact.name)\n\n    if (dublicateContact) {\n      return alert (`${data.name} is already in contacts` )\n    }\n\n    dispatch(contactsOperations.addContact(contact));\n  }\n\n  const onDeleteContact = id => {\n    dispatch(contactsOperations.deleteContact(id));\n }\n \n  const changeFilter = e => {\n    const filterValue = e.target.value\n     dispatch(setFilter(filterValue));\n   }\n\n   const visibleContacts = contacts.filter(contact => \n    contact.name.toLowerCase().includes(filter.toLowerCase()));\n\n    return (\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            fontSize: 40,\n            color: '#010101'\n          }}\n        >\n\n        <CardForm onSubmit={formSubmitHandler}/>\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChangeFilter={changeFilter}/>\n        <CardList contacts={visibleContacts} onDeleteContact={onDeleteContact}/>\n        </div>\n      );\n}"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","CardForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","numberInputId","fields","handleInputChange","e","target","value","reset","preventDefault","htmlFor","className","css","type","pattern","title","required","onChange","contacts","onDeleteContact","map","onClick","filterInputId","filter","onChangeFilter","getContacts","state","items","Contacts","dispatch","useDispatch","useSelector","contactsSelectors","useEffect","contactsOperations","visibleContacts","contact","toLowerCase","includes","style","display","flexDirection","justifyContent","alignItems","fontSize","color","data","find","item","alert","filterValue","setFilter"],"sourceRoot":""}